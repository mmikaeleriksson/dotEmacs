#+TITLE: Emacs config
#+AUTHOR: Mikael Eriksson
#+PROPERTY: header-args :tangle yes :cache yes

* Package setup
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)

(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("stable-melpa" . "http://stable.melpa.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

(package-initialize)
(setq package-enable-at-startup nil)
(unless package-archive-contents
  (message "Refreshing package archives...")
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (message "`use-package' not found.  Installing...")
  (package-install 'use-package))

(require 'use-package)
(setq use-package-minimum-reported-time 0
      use-package-verbose t)
#+END_SRC

* Benchmark
#+BEGIN_SRC emacs-lisp
 (use-package benchmark-init
  :ensure t)
#+END_SRC

* Basic
** Annotate fix
#+BEGIN_SRC emacs-lisp
(eval-after-load "vc-git"
  '(defun vc-git-annotate-command (file buf &optional rev)
    (let ((name (file-relative-name file)))
      (vc-git-command buf 'async nil "blame" "--date=iso" rev "--" name)))
)
#+END_SRC

** Skip gui
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(set-variable 'tooltip-mode nil)
(blink-cursor-mode -1)
(column-number-mode t)
(setq inhibit-splash-screen t)
#+END_SRC

** Enables show-paren-mode
#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

** Auto-save and backup files saved in TEMP
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,"~/.saves")))
(setq custom-file "~/.emacs.d/auto-custom.el")
#+END_SRC

** Change all prompts to y or n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** settings for new frames (that is new window in windows, C-x 5 2)
#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((font . "Fira Mono")
	(vertical-scroll-bars . nil)
	(menu-bar-lines . 0)
	(left-fringe . 0)))
#+END_SRC

* Modes
** rjsx-mode
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . rjsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . rjsx-mode))
#+END_SRC

** nxml-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ui\\'" . nxml-mode))
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.html\\'"))
#+END_SRC

** cc-mode
Switch between header and implementation file
#+BEGIN_SRC emacs-lisp
(eval-after-load "cc-mode"
  '(define-key c++-mode-map (kbd "C-x m") 'ff-find-other-file))
#+END_SRC
* Functions
** Override alt-backspace
#+BEGIN_SRC emacs-lisp
(defun miker/backward-delete-word (arg)
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))
(global-set-key (kbd "M-<backspace>") 'miker/backward-delete-word)
#+END_SRC

** Delete line (without kill-ring) (Ctrl-Shift-K)
#+BEGIN_SRC emacs-lisp
(defun miker/delete-line-no-kill ()
  (interactive)
  (delete-region
   (point)
   (save-excursion (move-end-of-line 1) (point)))
  (delete-char 1)
  (open-line 1)
)
(global-set-key (kbd "C-S-k") 'miker/delete-line-no-kill)
#+END_SRC

** isearch-query-replace-symbol-at-point (M-s %)
#+BEGIN_SRC emacs-lisp
(defun miker/isearch-query-replace-symbol-at-point ()
(interactive)
(isearch-forward-symbol-at-point)
(isearch-query-replace-regexp)
)
(global-set-key (kbd "M-s %") 'miker/isearch-query-replace-symbol-at-point)
#+END_SRC
* Look and feel
** Theme
*** chocolate-theme
#+BEGIN_SRC emacs-lisp
;;(set-background-color "wheat2")
;;(use-package chocolate-theme
;;  :ensure t
;;  :config
;;  (load-theme 'chocolate t))
#+END_SRC

*** dracula-theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula t))

(set-face-attribute 'region nil :background "#342c6b" :foreground nil)
#+END_SRC

** Layout
*** Add line at top of the buffer to show column length
#+BEGIN_SRC emacs-lisp
(setq-default header-line-format
              (list " " (make-string 76 ?-) "|"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;Highlight line
;;(global-hl-line-mode 1)
;;(set-face-background hl-line-face "darkgrey")
(set-cursor-color "#C8FF03")
#+END_SRC

*** Fringe git-gutter settings
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t)
(use-package fringe-helper
  :ensure t)
(use-package git-gutter-fringe
  :ensure t)

(set-face-attribute 'fringe nil :background "darkgrey" :foreground "darkgrey")
(setq-default right-fringe-width 15)
(setq git-gutter-fr:side 'right-fringe)
;foregound
(set-face-foreground 'git-gutter-fr:modified "orange")
(set-face-foreground 'git-gutter-fr:added "dark sea green")
(set-face-foreground 'git-gutter-fr:deleted "tomato1")
;background
(set-face-background 'git-gutter-fr:added  "SystemGrayText")
(set-face-background 'git-gutter-fr:deleted  "SystemGrayText")
(set-face-background 'git-gutter-fr:modified  "SystemGrayText")
(global-git-gutter-mode)
#+END_SRC

*** yascroll 'no scroll bar'
#+BEGIN_SRC emacs-lisp
;; No scroll bar
(set-face-background 'vertical-border "snow4")
(set-face-foreground 'vertical-border (face-background 'vertical-border))

(use-package yascroll
  :ensure t)
(global-yascroll-bar-mode 1)
#+END_SRC

*** smart-mode-line
#+BEGIN_SRC emacs-lisp
;(use-package smart-mode-line
;  :ensure t
;  :config
;  (setq sml/theme nil)
;  (setq sml/directory-truncation-string ".../")
;  (setq sml/shorten-directory t)
;  (setq sml/shorten-modes t)
;  (setq sml/name-width 40)
;  (setq sml/mode-width 40))
;(sml/setup)
#+END_SRC

*** Trailing whitespaces
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

*** Layout functions
**** Split up 2 buffers
#+BEGIN_SRC emacs-lisp
(defun miker/two-buffer-layout ()
  (interactive)
  (delete-other-windows)

  (defadvice split-window-horizontally (after rebalance-windows activate)
    (balance-windows))

  (ad-activate 'split-window-horizontally)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (other-window 2)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
)
(global-set-key (kbd "C-x <f1>") 'miker/two-buffer-layout)
#+END_SRC

**** Split up 3 buffers
#+BEGIN_SRC emacs-lisp
(defun miker/three-buffer-layout ()
  (interactive)
  (delete-other-windows)

  (defadvice split-window-horizontally (after rebalance-windows activate)
    (balance-windows))

  (ad-activate 'split-window-horizontally)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (other-window 2)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
)
(global-set-key (kbd "C-x <f2>") 'miker/three-buffer-layout)
#+END_SRC

**** Split up 5 buffers
#+BEGIN_SRC emacs-lisp
(defun miker/five-buffer-layout ()
  (interactive)
  (delete-other-windows)

  (defadvice split-window-horizontally (after rebalance-windows activate)
    (balance-windows))

  (ad-activate 'split-window-horizontally)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (other-window 3)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
)
(global-set-key (kbd "C-x <f3>") 'miker/five-buffer-layout)
#+END_SRC

*** display-time-mode
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "(%H:%M %e/%m)")
(display-time-mode 1)
#+END_SRC

** Input
*** Insert matching delimiters
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+END_SRC
*** Indentation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default js2-indent-level 4)
(setq-default sgml-basic-offset 4)
(setq-default cmake-tab-width 4)
(setq-default nxml-child-indent 4 nxml-attribute-indent 4)
#+END_SRC
*** I-search
#+BEGIN_SRC emacs-lisp
(setq search-whitespace-regexp ".*?")
#+END_SRC
* Packages
** Clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :ensure t
  :bind
  (("C-c f" . clang-format)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :after (magit))
#+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :after (git-timemachine))
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind
  ("C-c C-r" . swiper)
  )
#+END_SRC

** multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . 'mc/mark-all-like-this)
)
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (setq helm-always-two-windows nil)
  (setq helm-split-window-default-side 'same)
  (defun miker/helm-grep-do-git-grep (not-all)
    (interactive "P")
    (helm-grep-git-1 default-directory (null not-all)))
  :bind
  (("C-x l" . helm-mini)
   ("C-x r b" . helm-bookmarks)
   ("C-x C-f" . helm-find-files)
   ("M-x" . helm-M-x)
   ("M-y" . helm-show-kill-ring)
   ("C-c g" . miker/helm-grep-do-git-grep)))
#+END_SRC

** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind
  ("C-=" . er/expand-region)
  ("C-;" . er/expand-region))
#+END_SRC

** move-text
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :bind
  (("C-S-p" . move-text-up)
   ("C-S-n" . move-text-down)))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t)
(which-key-mode)
#+END_SRC

** doom-modeline
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-init)
)
#+END_SRC

** minimap
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :ensure t
  :custom
  (minimap-window-location 'right)
  :config
  ;;dracula color
  (set-face-attribute 'minimap-active-region-background nil :background "#342c6b")
)
#+END_SRC
* EXWM
  :PROPERTIES:
  :header-args: :tangle no
  :END:

  tangle yes/no to enable/disable EXWM

** Add wm
#+BEGIN_SRC
  cd /usr/share/xsessions
  touch emacs.desktop
#+END_SRC

  Add to emacs.desktop:
#+BEGIN_SRC
  [Desktop Entry]
  Name=EXWM
  Comment=Emacs window manager
  Exec=emacs
  Type=Application
#+END_SRC

** exwm-package
#+BEGIN_SRC emacs-lisp
(use-package exwm
  :ensure t
  :config
  (require 'exwm-config)
  (exwm-config-default)
)
#+END_SRC

** dmenu
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind
  ("s-SPC" . 'dmenu))
#+END_SRC

** systemtray
#+BEGIN_SRC emacs-lisp
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+END_SRC

** randr
#+BEGIN_SRC emacs-lisp
(require 'exwm-randr)
(setq exwm-randr-workspace-output-plist
'(0 "DVI-D-0" 1 "DP-2"))
(exwm-randr-enable)
#+END_SRC

Added in /home/<user>/.profile :
xrandr --output DP-2 --primary --mode 2560x1440 --rate 143.96
xrandr --output DVI-D-0 --mode 1920x1080 --rotate right --left-of DP-2

Run xrandr in term to see current settings

** enable XF86
#+BEGIN_SRC emacs-lisp
(dolist (k '(XF86AudioLowerVolume
             XF86AudioRaiseVolume
             XF86PowerOff
             XF86AudioMute
             XF86AudioPlay
             XF86AudioStop
             XF86AudioPrev
             XF86AudioNext
             XF86ScreenSaver
             XF68Back
             XF86Forward
             Scroll_Lock
             print)))
#+END_SRC

** keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-k") 'exwm-workspace-delete)
(global-set-key (kbd "s-w") 'exwm-workspace-swap)

(global-set-key (kbd "<XF86ScreenSaver>") 'miker/launch-lock-screen)
(global-set-key (kbd "<XF86PowerOff>") 'miker/launch-shutdown)
#+END_SRC

** volume
#+BEGIN_SRC emacs-lisp
(defconst volumeModifier "4")

(defun audio/mute ()
  (interactive)
  (start-process "audio-mute" nil "pulsemixer" "--toggle-mute"))

(defun audio/raise-volume ()
  (interactive)
  (start-process "raise-volume" nil "pulsemixer" "--change-volume" (concat "+" volumeModifier)))

(defun audio/lower-volume ()
  (interactive)
  (start-process "lower-volume" nil "pulsemixer" "--change-volume" (concat "-" volumeModifier)))

(global-set-key (kbd "<XF86AudioMute>") 'audio/mute)
(global-set-key (kbd "<XF86AudioRaiseVolume>") 'audio/raise-volume)
(global-set-key (kbd "<XF86AudioLowerVolume>") 'audio/lower-volume)
#+END_SRC

** default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+END_SRC

* Org
** Unbind
C-, is reserved for switching buffers
C-c C-r is reserved for swiper
#+BEGIN_SRC emacs-lisp
(eval-after-load "org" '(define-key org-mode-map (kbd "C-,") nil))
(eval-after-load "org" '(define-key org-mode-map (kbd "C-c C-r") nil))
#+END_SRC

** org-todo-keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t!)" "BUY(b!)" "BOOK(k!)" "LOOKUP(l!)" "|" "DONE(d!)")))
#+END_SRC

** org-super-agenda
Set org-agenda files
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :ensure t
  :init
  (setq org-super-agenda-groups
	'((:name "Deadline"
		 :deadline t
		 :order 1)
	  (:name "Todo"
		 :todo ("TODO")
		 :order 2)
	  (:name "Book"
		 :todo ("BOOK")
		 :order 3)
	  (:name "Lookup"
		 :todo ("LOOKUP")
		 :order 4)
	  (:name "Buy"
		 :todo ("BUY")
		 :order 5))
	)
  :config
  (org-super-agenda-mode)
  (setq org-agenda-files
      (apply 'append
             (mapcar
	      (lambda (directory)
	        (directory-files-recursively
		 directory org-agenda-file-regexp)
		) '(
              "~/Dropbox/org-mode/"
              )))
      )
  )
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
 :ensure t
 :init
 (setq org-bullets-bullet-list
       '("ァ" "ィ" "ゥ" "ェ" "ォ"))
 :config
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** tags
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(("@TRAVEL" . ?t)
                      ("@WEBSITE" . ?w)
                      ("KEYBOARD" . ?k)
                      ("@OREGON2020")
                      ("@SCOTLAND2020")
		      ))
#+END_SRC

** org-capture-templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates '(
                              ("t" "Todo")
                              ("tt" "Todo" entry
                               (file+headline
                               "~/Dropbox/org-mode/todo.org" "Todo")
                               "* TODO %?\nAdded: %U")

                               ("tw" "Todo - Website" entry
                               (file+headline
                               "~/Dropbox/org-mode/todo.org" "Website")
                               "* TODO %?\nAdded: %U")

                              ("tr" "Todo - Travel" entry
                               (file+headline
                               "~/Dropbox/org-mode/todo.org" "Travel")
                               "* BOOK %?\nAdded: %U")

                              ("tp" "Todo - Purchase" entry
                               (file+headline
                               "~/Dropbox/org-mode/todo.org" "Purchase")
                               "* BUY %?\nAdded: %U")

                              ("tk" "Todo - Keyboard")
                              ("tkk" "Todo - Keyboard" entry
                               (file+headline
                               "~/Dropbox/org-mode/todo.org" "Keyboard")
                               "* TODO %?\nAdded: %U")

                              ("tk6" "Todo - Keyboard - 65%" entry
                               (file+olp
                               "~/Dropbox/org-mode/todo.org" "Todo" "Keyboard" "65%")
                               "* TODO %?\nAdded: %U")

                              ("r" "Travel")
                              ("ro" "Travel - Oregon2020" entry
                               (file+headline
                               "~/Dropbox/org-mode/Trips/usa-oregon-2020.org" "Oregon2020")
                               "* TODO %?\nAdded: %U")

                              ("r" "Travel")
                              ("rs" "Travel - Scotland2020" entry
                               (file+headline
                               "~/Dropbox/org-mode/Trips/scotland-2020.org" "Scotland2020")
                               "* TODO %?\nAdded: %U")
                             ))
#+END_SRC

* Keybinds
** end/start of buffer (<home> | <end>)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") `beginning-of-buffer)
(global-set-key (kbd "<end>") `end-of-buffer)
#+END_SRC

** Switch buffers (C-, | C-.)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-,")
                '(lambda()
                (interactive)
                (select-window (previous-window))
                ))

(global-set-key (kbd "C-.")
                '(lambda()
                (interactive)
                (select-window (next-window))
))
#+END_SRC

** org-capture (C-c c)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") `org-capture)
#+END_SRC

** org-agenda (C-c a)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") `org-agenda)
#+END_SRC
