#+TITLE: Emacs config
#+AUTHOR: Mikael Eriksson
#+PROPERTY: header-args :tangle yes :cache yes

* Package setup
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)

(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("stable-melpa" . "http://stable.melpa.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

(package-initialize)
(setq package-enable-at-startup nil)
(unless package-archive-contents
  (message "Refreshing package archives...")
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (message "`use-package' not found.  Installing...")
  (package-install 'use-package))

(require 'use-package)
(setq use-package-minimum-reported-time 0
      use-package-verbose t)
#+END_SRC

* Benchmark
#+BEGIN_SRC emacs-lisp
 (use-package benchmark-init
  :ensure t)
#+END_SRC
* Basic
** Annotate fix
#+BEGIN_SRC emacs-lisp
(eval-after-load "vc-git"
  '(defun vc-git-annotate-command (file buf &optional rev)
    (let ((name (file-relative-name file)))
      (vc-git-command buf 'async nil "blame" "--date=iso" rev "--" name)))
)
#+END_SRC

** Skip gui
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(set-variable 'tooltip-mode nil)
(blink-cursor-mode -1)
(column-number-mode t)
(setq inhibit-splash-screen t)
#+END_SRC

** Enables show-paren-mode
#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

** Auto-save and backup files saved in TEMP
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,"~/.backups")))
(setq auto-save-file-name-transforms
      `((".*" ,"~/.autosaves" t)))
(setq custom-file "~/.emacs.d/auto-custom.el")
#+END_SRC

** Change all prompts to y or n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** settings for new frames (that is new window in windows, C-x 5 2)
#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((font . "Fira Mono")
	(vertical-scroll-bars . nil)
	(menu-bar-lines . 0)
	(left-fringe . 0)))
#+END_SRC

* Modes
** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
#+END_SRC

** nxml-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ui\\'" . nxml-mode))
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.html\\'"))
#+END_SRC

** cc-mode
Switch between header and implementation file
#+BEGIN_SRC emacs-lisp
(eval-after-load "cc-mode"
  '(define-key c++-mode-map (kbd "C-x m") 'ff-find-other-file))
#+END_SRC
* Functions
** define you own browser function (which opens `eww' with the url)
#+BEGIN_SRC emacs-lisp
(defun my-browse-url-browser-function (url &rest args)
  (eww url))

;; activate your own browser function
(setq browse-url-browser-function 'my-browse-url-browser-function)
#+END_SRC

** Override alt-backspace
#+BEGIN_SRC emacs-lisp
(defun backward-delete-word (arg)
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))
(global-set-key (kbd "M-<backspace>") 'backward-delete-word)
#+END_SRC

** Delete line (without kill-ring) (Ctrl-Shift-K)
#+BEGIN_SRC emacs-lisp
(defun delete-line-no-kill ()
  (interactive)
  (delete-region
   (point)
   (save-excursion (move-end-of-line 1) (point)))
  (delete-char 1)
  (open-line 1)
)
#+END_SRC

* Look and feel
** Theme
*** chocolate-theme
#+BEGIN_SRC emacs-lisp
;;(set-background-color "wheat2")
;;(use-package chocolate-theme
;;  :ensure t
;;  :config
;;  (load-theme 'chocolate t))
#+END_SRC

*** dracula-theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula t))

(set-face-attribute 'region nil :background "#342c6b" :foreground nil)
#+END_SRC

** Layout
*** Add line at top of the buffer to show column length
#+BEGIN_SRC emacs-lisp
(setq-default header-line-format
              (list " " (make-string 76 ?-) "|"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;Highlight line
;;(global-hl-line-mode 1)
;;(set-face-background hl-line-face "darkgrey")
(set-cursor-color "#C8FF03")
#+END_SRC

*** Fringe git-gutter settings
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t)
(use-package fringe-helper
  :ensure t)
(use-package git-gutter-fringe
  :ensure t)

(set-face-attribute 'fringe nil :background "darkgrey" :foreground "darkgrey")
(setq-default right-fringe-width 15)
(setq git-gutter-fr:side 'right-fringe)
;foregound
(set-face-foreground 'git-gutter-fr:modified "orange")
(set-face-foreground 'git-gutter-fr:added "dark sea green")
(set-face-foreground 'git-gutter-fr:deleted "tomato1")
;background
(set-face-background 'git-gutter-fr:added  "SystemGrayText")
(set-face-background 'git-gutter-fr:deleted  "SystemGrayText")
(set-face-background 'git-gutter-fr:modified  "SystemGrayText")
(global-git-gutter-mode)
#+END_SRC

*** yascroll 'no scroll bar'
#+BEGIN_SRC emacs-lisp
;; No scroll bar
(set-face-background 'vertical-border "snow4")
(set-face-foreground 'vertical-border (face-background 'vertical-border))

(use-package yascroll
  :ensure t)
(global-yascroll-bar-mode 1)
#+END_SRC

**** smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :config
  (setq sml/theme nil)
  (setq sml/directory-truncation-string ".../")
  (setq sml/shorten-directory t)
  (setq sml/shorten-modes t)
  (setq sml/name-width 40)
  (setq sml/mode-width 40))
(sml/setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

*** Layout functions
**** Split up 2 buffers
#+BEGIN_SRC emacs-lisp
(defun my-two-buffer-layout ()
  (interactive)
  (delete-other-windows)

  (defadvice split-window-horizontally (after rebalance-windows activate)
    (balance-windows))

  (ad-activate 'split-window-horizontally)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (other-window 2)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
)
#+END_SRC

**** Split up 3 buffers
#+BEGIN_SRC emacs-lisp
(defun my-three-buffer-layout ()
  (interactive)
  (delete-other-windows)

  (defadvice split-window-horizontally (after rebalance-windows activate)
    (balance-windows))

  (ad-activate 'split-window-horizontally)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (other-window 2)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
)
#+END_SRC

**** Split up 5 buffers
#+BEGIN_SRC emacs-lisp
(defun my-five-buffer-layout ()
  (interactive)
  (delete-other-windows)

  (defadvice split-window-horizontally (after rebalance-windows activate)
    (balance-windows))

  (ad-activate 'split-window-horizontally)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (split-window-horizontally) ;; -> |
  (next-multiframe-window)
  (switch-to-buffer
   "*scratch*")

  (other-window 3)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
)
#+END_SRC

** Input
*** Insert matching delimiters
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+END_SRC
*** Indentation
**** Indentation settings
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default js2-indent-level 4)
(setq-default sgml-basic-offset 4)
(setq-default cmake-tab-width 4)
(setq-default nxml-child-indent 4 nxml-attribute-indent 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; fix indentation.
(c-add-style "my-cpp-style"
	     '("stroustrup"
	       (c-offsets-alist
		(innamespace . -)
		(inline-open . 0)
		(access-label . -3))))
(setq c-default-style "my-cpp-style")
#+END_SRC
***** TODO Remove my-cpp-style?
* Packages
** Clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :ensure t
  :bind
  (("C-c f" . clang-format)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :after (magit))
#+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :after (git-timemachine))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind
  ("C-c C-r" . swiper)
  )
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . 'mc/mark-all-like-this)
)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (setq helm-always-two-windows nil)
  (setq helm-split-window-default-side 'same)
  (defun my-helm-grep-do-git-grep (not-all)
    (interactive "P")
    (helm-grep-git-1 default-directory (null not-all)))
  :bind
  (("C-x l" . helm-mini)
   ("C-x r b" . helm-bookmarks)
   ("C-x C-f" . helm-find-files)
   ("M-x" . helm-M-x)
   ("M-y" . helm-show-kill-ring)
   ("C-c g" . my-helm-grep-do-git-grep)))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind
  ("C-=" . er/expand-region)
  ("C-;" . er/expand-region))
#+END_SRC
** move-text
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :bind
  (("C-S-p" . move-text-up)
   ("C-S-n" . move-text-down)))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t)
(which-key-mode)
#+END_SRC
#+END_SRC
* Org
** Unbind
C-, is reserved for switching buffers
C-c C-r is reserved for swiper
#+BEGIN_SRC emacs-lisp
(eval-after-load "org" '(define-key org-mode-map (kbd "C-,") nil))
(eval-after-load "org" '(define-key org-mode-map (kbd "C-c C-r") nil))
#+END_SRC

** org-agenda
Set org-agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list
"~/.emacs.d/org/"
"~/.emacs.d/emacs.org"))
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
 :ensure t
 :init
 (setq org-bullets-bullet-list
       '("ァ" "ィ" "ゥ" "ェ" "ォ"))
 :config
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Keybinds
** delete line with no kill ring
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-k") 'delete-line-no-kill)
#+END_SRC

** C-x F<n> : Layout
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x <f1>") 'my-two-buffer-layout)

;;C-x F2 : Layout
(global-set-key (kbd "C-x <f2>") 'my-three-buffer-layout)

;;C-x F3 : Layout
(global-set-key (kbd "C-x <f3>") 'my-five-buffer-layout)
#+END_SRC

** end/start of buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<end>") `end-of-buffer)
(global-set-key (kbd "<home>") `beginning-of-buffer)
#+END_SRC

** Switch buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-,")
'(lambda()
(interactive)
(select-window (previous-window))))

(global-set-key (kbd "C-.")
'(lambda()
(interactive)
(select-window (next-window))))
#+END_SRC

* Kept from old config
(setq same-window-regexps '("\\`\\*Customiz.*\\*\\'" "\\*cvs[az-]*\\*"))


(setq buffer-menu-buffer-font-lock-keywords
      '(("^....*TAGS.*" . font-lock-comment-face)
        ("^....[*].*" . font-lock-keyword-face)
        ("^.[%].*" . font-lock-string-face)))

(defun buffer-menu-custom-font-lock ()
  (let ((font-lock-unfontify-region-function
	 (lambda (start end)
	   (remove-text-properties start end '(font-lock-face nil)))))
    (font-lock-unfontify-buffer)
    (set (make-local-variable 'font-lock-defaults)
	 '(buffer-menu-buffer-font-lock-keywords t))
    (font-lock-fontify-buffer)))

(add-hook 'electric-buffer-menu-mode-hook 'buffer-menu-custom-font-lock)


;; auto-mode-alist
(add-to-list 'auto-mode-alist '("makefile$" . makefile-mode))
(add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.ih$" . c++-mode))
